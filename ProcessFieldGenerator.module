<?php

/**
 * Field generator module
 *
 * ProcessWire 2.x 
 * Copyright (C) 2014 by Pierre-Luc Auclair 
 * Licensed under The MIT License (MIT), see README.md
 */

class ProcessFieldGenerator extends Process implements Module 
{

	public static function getModuleInfo() 
	{
		return array(
			'title' => 'Field Generator', 
			'version' => 100, 
			'summary' => 'Generate random strings for any field',
			'href' => 'https://github.com/plauclair/FieldGenerator', 
			'singular' => true, 
			'autoload' => true, 
			);
	}

	/**
	 * Initialize the module
	 */

	public function init() 
	{
		$this->pages->addHookAfter('setupNew', $this, 'generatefield'); 
	}

	/**
	 * Helper functions
	 */

	private function crypto_rand_secure($min, $max) 
	{
		$range = $max - $min;
		if ($range < 0) return $min; // not so random...
		$log = log($range, 2);
		$bytes = (int) ($log / 8) + 1; // length in bytes
		$bits = (int) $log + 1; // length in bits
		$filter = (int) (1 << $bits) - 1; // set all lower bits to 1
		do {
			$rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes)));
			$rnd = $rnd & $filter; // discard irrelevant bits
		} while ($rnd >= $range);
		return $min + $rnd;
	}

	private function getToken($length,$dict,$pre)
	{
			$token = $pre;
			for ($i=0;$i<$length;$i++) {
				$token .= $dict[$this->crypto_rand_secure(0,strlen($dict))];
			}
			return $token;
	}

	/**
	 * Main generator function
	 *
	 * TODO : Implement template support
	 */

	public function generatefield($event)
	{
		$page = $event->arguments[0]; 

		// Grab the new page's parent template 
		$parentId = $page->parent()->id;
		$pageTemplate = $page->template;
		
		// check if it matches against some rule
		foreach (wire('pages')->find("template=fieldgenerator") as $rule) 
		{
			// initiate or reset things
			$ParentMatch = false;
			$TemplateMatch = false;
			$ParentIsSet = false;
			$TemplateIsSet = false;
			// does parent ID match
			if ($parentId == $rule->fieldgenerator_parentid) {
				$ParentMatch = true;
			}
			// does template match
			if ($pageTemplate == $rule->fieldgenerator_template) {
				$TemplateMatch = true;
			}
			// is rule parent id set
			if (strlen($rule->fieldgenerator_parentid) > 0) {
				$ParentIsSet = true;
			}
			// is rule template set
			if (strlen($rule->fieldgenerator_template) > 0) {
				$TemplateIsSet = true;
			}
			// if match, run rule, please forgive ugliness of code
			if (($ParentMatch and $ParentIsSet and $TemplateMatch and $TemplateIsSet) or 
				($ParentMatch and $ParentIsSet and !$TemplateMatch and !$TemplateIsSet) or 
				(!$ParentMatch and !$ParentIsSet and $TemplateMatch and $TemplateIsSet)) 
			{
				// there's a match, so let's use the field specified in $rule
				$field = $rule->fieldgenerator_field;
				// generate a unique value, let's start by initiating
				$uniqueValue = false;
				// loop until it's unique
				while ($uniqueValue == false) {
					// actual string generation
					$value = $this->getToken($rule->fieldgenerator_length, $rule->fieldgenerator_dictionary,'');
					// verify it's not used already
					$check = wire('pages')->find("$field=$value");
					if(count($check) == 0) {
						$uniqueValue = true;
					}
				}
				// set field value
				$page->$field = $value;
				$this->message("Field '{$field}' was generated");
				// and we're done
			}
		}
	}

	//------------------------------

	public function ___install() 
	{	
		// create Setup > Field generator page if it doesn't exist
		$page = $this->pages->get('template=admin, name=field-generator');
		if(!$page->id){
			$p = new Page(); 
			$p->template = 'admin'; 
			$p->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');	 
			$p->name = 'field-generator';
			$p->title = 'Field Generator';
			$p->process = "ProcessFieldGenerator";
			$p->save();
		}

		// create required fields
		if (!$this->fields->get('fieldgenerator_template')) {
			$f = new Field();
			$f->name = "fieldgenerator_template";
			$f->type = "Text";
			$f->label = "Template";
			$f->flags = Field::flagSystem;
			$f->save();
		}

		if (!$this->fields->get('fieldgenerator_parentid')) {
			$f = new Field();
			$f->name = "fieldgenerator_parentid";
			$f->type = "Text";
			$f->label = "Parent ID";
			$f->flags = Field::flagSystem;
			$f->save();
		}

		if (!$this->fields->get('fieldgenerator_field')) {
			$f = new Field();
			$f->name = "fieldgenerator_field";
			$f->type = "Text";
			$f->label = "Field name";
			$f->flags = Field::flagSystem;
			$f->save();
		}

		if (!$this->fields->get('fieldgenerator_length')) {
			$f = new Field();
			$f->name = "fieldgenerator_length";
			$f->type = "Integer";
			$f->label = "Length";
			$f->flags = Field::flagSystem;
			$f->save();
		}

		if (!$this->fields->get('fieldgenerator_dictionary')) {
			$f = new Field();
			$f->name = "fieldgenerator_dictionary";
			$f->type = "Text";
			$f->label = "Dictionary";
			$f->flags = Field::flagSystem;
			$f->save();
		}

		//create required template
		if (!$this->templates->get('fieldgenerator')) {
			$g = new Fieldgroup();
			$g->name = "fieldgenerator";
			$g->add("title");
			$g->add("fieldgenerator_template");
			$g->add("fieldgenerator_parentid");
			$g->add("fieldgenerator_field");
			$g->add("fieldgenerator_length");
			$g->add("fieldgenerator_dictionary");
			$g->save();


			$t = new Template();
			$t->name = "fieldgenerator";
			$t->flags = Template::flagSystem;
			$t->set('parentTemplates',array(2));
			$t->fields = $g;
			$t->save();
		}
	}

	public function ___uninstall() 
	{	
		$settings = $this->pages->find('template=fieldgenerator, include=all');
		if ($settings) {
			foreach ($settings as $s) {
				$s->delete();
			}
		}

		$setupPage = $this->pages->get('name=field-generator, include=all');
		if ($setupPage) {
			$setupPage->delete();
		}

		$t = $this->templates->get("fieldgenerator");
		$t->flags = Template::flagSystemOverride;
		$t->flags = 0;
		$g = $t->fieldgroup;

		$f = $this->fields->get('fieldgenerator_template');
		$f->flags = Template::flagSystemOverride;
		$f->flags = 0;
		$g->remove('fieldgenerator_template');
		$g->save();
		$this->fields->delete($f);

		$f = $this->fields->get('fieldgenerator_parentid');
		$f->flags = Template::flagSystemOverride;
		$f->flags = 0;
		$g->remove('fieldgenerator_parentid');
		$g->save();
		$this->fields->delete($f);

		$f = $this->fields->get('fieldgenerator_field');
		$f->flags = Template::flagSystemOverride;
		$f->flags = 0;
		$g->remove('fieldgenerator_field');
		$g->save();
		$this->fields->delete($f);

		$f = $this->fields->get('fieldgenerator_length');
		$f->flags = Template::flagSystemOverride;
		$f->flags = 0;
		$g->remove('fieldgenerator_length');
		$g->save();
		$this->fields->delete($f);

		$f = $this->fields->get('fieldgenerator_dictionary');
		$f->flags = Template::flagSystemOverride;
		$f->flags = 0;
		$g->remove($f);
		$g->save();
		$this->fields->delete($f);

		$this->templates->delete($t);
		$this->fieldgroups->delete($g);
	}
	
}